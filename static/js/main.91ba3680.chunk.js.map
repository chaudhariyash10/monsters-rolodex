{"version":3,"sources":["components/card/card.component.jsx","components/card-list/card-list.component.jsx","components/search-box/search-box.component.js","App.js","reportWebVitals.js","index.js"],"names":["Card","props","className","src","idx","alt","monster","name","email","CardList","monsters","map","SearchBox","placeholder","handleChange","type","onChange","App","state","searchField","fetch","then","response","json","res","setState","this","filteredMonsters","filter","toLowerCase","includes","e","target","value","Component","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"mUAKaA,EAAO,SAACC,GAAD,OAChB,sBAAKC,UAAU,iBAAf,UACI,qBAAKC,IAAG,+BAA0BF,EAAMG,IAAhC,0BAA6DC,IAAI,YACzE,6BAAKJ,EAAMK,QAAQC,OACnB,6BAAKN,EAAMK,QAAQE,YCHdC,G,MAAW,SAACR,GACrB,OACE,qBAAKC,UAAU,YAAf,SAEID,EAAMS,SAASC,KAAI,SAACL,EAASF,GAAV,OAClB,cAAC,EAAD,CAAME,QAASA,EAASF,IAAOA,WCP7BQ,G,MAAY,SAAC,GAAD,IAAEC,EAAF,EAAEA,YAAaC,EAAf,EAAeA,aAAf,OACrB,uBAAOC,KAAK,SAASb,UAAU,SAASW,YAAaA,EAAaG,SAAWF,MCoClEG,E,kDAnCb,aAAe,IAAD,8BACZ,gBAEKC,MAAQ,CACXR,SAAU,GACVS,YAAa,IALH,E,qDASd,WAAqB,IAAD,OAClBC,MAAM,8CACHC,MAAK,SAAAC,GAAQ,OAAIA,EAASC,UAC1BF,MAAK,SAAAG,GAAG,OAAI,EAAKC,SAAS,CAAEf,SAAUc,S,oBAK3C,WAAU,IAAD,SAE2BE,KAAKR,MAA/BR,EAFD,EAECA,SAAUS,EAFX,EAEWA,YAEZQ,EAAmBjB,EAASkB,QAAO,SAAAtB,GAAO,OAC9CA,EAAQC,KAAKsB,cAAcC,SAASX,EAAYU,kBAGlD,OACE,sBAAK3B,UAAU,MAAf,UACE,oDACA,cAAC,EAAD,CAAWW,YAAY,kBAAkBC,aAAe,SAAAiB,GAAC,OAAK,EAAKN,SAAS,CAACN,YAAaY,EAAEC,OAAOC,WACnG,cAAC,EAAD,CAAUvB,SAAUiB,W,GA9BVO,aCOHC,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBhB,MAAK,YAAkD,IAA/CiB,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOF,GACPG,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAQN,OCDdO,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1BZ,M","file":"static/js/main.91ba3680.chunk.js","sourcesContent":["import React from \"react\";\r\n\r\n\r\nimport \"./card.styles.css\";\r\n\r\nexport const Card = (props) => (\r\n    <div className=\"card-container\">\r\n        <img src={`https://robohash.org/${props.idx}?set=set2&size=180x180`} alt=\"Monster\" />\r\n        <h2>{props.monster.name}</h2>\r\n        <h4>{props.monster.email}</h4>\r\n    </div>\r\n)\r\n\r\n","import React from \"react\";\r\n\r\nimport { Card } from \"../card/card.component.jsx\";\r\n\r\nimport './card-list.style.css';\r\n\r\nexport const CardList = (props) => {\r\n    return (\r\n      <div className=\"card-list\">\r\n        {\r\n          props.monsters.map((monster, idx) => (\r\n           <Card monster={monster} idx = {idx} />\r\n          ))\r\n        }\r\n      </div>\r\n    )\r\n}","import React from \"react\";\r\n\r\nimport \"./seach-component.styles.css\";\r\n\r\nexport const SearchBox = ({placeholder ,handleChange }) => (\r\n    <input type=\"search\" className=\"search\" placeholder={placeholder} onChange={ handleChange }/>\r\n)","import './App.css';\nimport React, { Component } from \"react\";\n\nimport { CardList } from './components/card-list/card-list.component';\nimport { SearchBox } from './components/search-box/search-box.component';\nclass App extends Component{\n  constructor() {\n    super();\n\n    this.state = {\n      monsters: [],\n      searchField: '',\n    }\n  }\n\n  componentDidMount() {\n    fetch(\"https://jsonplaceholder.typicode.com/users\")\n      .then(response => response.json())\n      .then(res => this.setState({ monsters: res }))\n      // .then(() => console.log(this.state));\n    \n  }\n\n  render() {\n\n    const { monsters, searchField } = this.state;\n\n    const filteredMonsters = monsters.filter(monster => (\n      monster.name.toLowerCase().includes(searchField.toLowerCase())\n    ))\n\n    return (\n      <div className=\"App\">\n        <h1> Monsters Rolodex </h1>\n        <SearchBox placeholder=\"Search Monsters\" handleChange={ e => (this.setState({searchField: e.target.value}))}/>\n        <CardList monsters={filteredMonsters} />\n      </div>\n    )\n  }\n}\n\nexport default App;\n  ","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}